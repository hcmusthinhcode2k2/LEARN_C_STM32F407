/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#include <stdio.h>

void delay(void) {

}
int main(void) {
	//peripheral register addresses;
	uint32_t volatile *const pGPIODModeReg = (uint32_t*) (0x40020C00);
	uint32_t volatile *const pInPutDataReg = (uint32_t*) (0x40020C00 + 0x10);
	uint32_t volatile *const pOutPutDataReg = (uint32_t*) (0x40020C00 + 0x14);
	uint32_t volatile *const pClockCtrlReg = (uint32_t*) (0x40023800 + 0x30);
	uint32_t volatile *const pPullupDownReg = (uint32_t*) (0x40020C0 + 0x0C);
	//1.Enable the peripheral clock of GPIOD peripheral
	*pClockCtrlReg |= (1 << 3);
	//2.configure PD0,PD1,PD2,PD3 as output (rows)
	*pGPIODModeReg &= ~(0xFF); //clear
	*pGPIODModeReg |= 0x55; //set
	//3.configure PD8,PD9,PD10,PD11 as input (columns)
	*pGPIODModeReg &= ~(0xFF << 16);
	//4.Enable internal pull-up resistors for PD8,PD9,PD10,PD11
	*pPullupDownReg &= ~(0xFF << 16);
	*pPullupDownReg |= (0x55 << 16);
while (1)
{
	//make all rows HIGH
	*pOutPutDataReg |= 0x0f;
	//make R1 LOW(PD0)
	*pOutPutDataReg &= ~(1 << 0);

	//scan the columns
	//check C1(PD8) low or high
	if (!(*pInPutDataReg & (1 << 8))) {
		//key is pressed
		printf("1\n");
		delay();
	}
	//check C2(PD9) low or high
	if (!(*pInPutDataReg & (1 << 9))) {
		//key is pressed
		printf("2\n");
		delay();
	}
	//check C3(PD10) low or high
	if (!(*pInPutDataReg & (1 << 10))) {
		//key is pressed
		printf("3\n");
		delay();
	}
	//check C4(PD11) low or high
	if (!(*pInPutDataReg & (1 << 11))) {
		//key is pressed
		printf("A\n");
		delay();
	}
	//make all rows HIGH
	*pOutPutDataReg |= 0x0f;
	//make R2 LOW(PD1)
	*pOutPutDataReg &= ~(1 << 1);
	//scan the columns
	//check C1(PD8) low or high
	if (!(*pInPutDataReg & (1 << 8))) {
		//key is pressed
		printf("4\n");
		delay();
	}
	//check C2(PD9) low or high
	if (!(*pInPutDataReg & (1 << 9))) {
		//key is pressed
		printf("5\n");
		delay();
	}
	//check C3(PD10) low or high
	if (!(*pInPutDataReg & (1 << 10))) {
		//key is pressed
		printf("6\n");
		delay();
	}
	//check C4(PD11) low or high
	if (!(*pInPutDataReg & (1 << 11))) {
		//key is pressed
		printf("B\n");
		delay();
	}
	//make all rows HIGH
	*pOutPutDataReg |= 0x0f;
	//make R3 LOW(PD1)
	*pOutPutDataReg &= ~(1 << 2);
	//scan the columns
	//check C1(PD8) low or high
	if (!(*pInPutDataReg & (1 << 8))) {
		//key is pressed
		printf("7\n");
		delay();
	}
	//check C2(PD9) low or high
	if (!(*pInPutDataReg & (1 << 9))) {
		//key is pressed
		printf("8\n");
		delay();
	}
	//check C3(PD10) low or high
	if (!(*pInPutDataReg & (1 << 10))) {
		//key is pressed
		printf("9\n");
		delay();
	}
	//check C4(PD11) low or high
	if (!(*pInPutDataReg & (1 << 11))) {
		//key is pressed
		printf("C\n");
		delay();
	}
	//make all rows HIGH
	*pOutPutDataReg |= 0x0f;
	//make R4 LOW(PD1)
	*pOutPutDataReg &= ~(1 << 3);
	//scan the columns
	//check C1(PD8) low or high
	if (!(*pInPutDataReg & (1 << 8))) {
		//key is pressed
		printf("*\n");
		delay();
	}
	//check C2(PD9) low or high
	if (!(*pInPutDataReg & (1 << 9))) {
		//key is pressed
		printf("0\n");
		delay();
	}
	//check C3(PD10) low or high
	if (!(*pInPutDataReg & (1 << 10))) {
		//key is pressed
		printf("#\n");
		delay();
	}
	//check C4(PD11) low or high
	if (!(*pInPutDataReg & (1 << 11))) {
		//key is pressed
		printf("D\n");
		delay();
	}
	}//end loop
}
